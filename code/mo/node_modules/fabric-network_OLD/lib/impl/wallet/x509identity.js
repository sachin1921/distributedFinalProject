"use strict";
/**
 * Copyright 2019 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
class X509Provider {
    constructor() {
        this.type = 'X.509';
    }
    fromJson(data) {
        if (data.type !== this.type) {
            throw new Error('Invalid identity type: ' + data.type);
        }
        if (data.version === 1) {
            const x509Data = data;
            return {
                credentials: {
                    certificate: x509Data.credentials.certificate,
                    privateKey: x509Data.credentials.privateKey,
                },
                mspId: x509Data.mspId,
                type: 'X.509',
            };
        }
        else {
            throw new Error('Unsupported identity version: ' + data.version);
        }
    }
    toJson(identity) {
        const data = {
            credentials: {
                certificate: identity.credentials.certificate,
                privateKey: identity.credentials.privateKey,
            },
            mspId: identity.mspId,
            type: 'X.509',
            version: 1,
        };
        return data;
    }
    async setUserContext(client, identity, name) {
        const userData = {
            cryptoContent: {
                privateKeyPEM: identity.credentials.privateKey,
                signedCertPEM: identity.credentials.certificate,
            },
            mspid: identity.mspId,
            skipPersistence: true,
            username: name,
        };
        const user = await client.createUser(userData);
        await client.setUserContext(user, true);
    }
}
exports.X509Provider = X509Provider;
//# sourceMappingURL=x509identity.js.map